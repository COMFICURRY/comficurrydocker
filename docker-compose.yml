# Docker Compose file Reference (https://docs.docker.com/compose/compose-file/)
version: '3.8'

# Define services
services:
  # App backend service
  app-server:
    # Configuration for building the docker image for the backend service
    build:
      context: comficurryapi # Use an image built from the specified dockerfile in the `spring boot-app-server` directory.
      dockerfile: Dockerfile
    image: comficurry/dockercompose_app-server
    ports:
      - "8080:8080" # Forward the exposed port 8080 on the container to port 8080 on the host machine
    restart: always
    depends_on: 
      - db # This service depends on postgress. Start that first.
    # Pass environment variables to the service
    environment: 
      - SPRING_DATASOURCE_URL=jdbc:postgresql://db:5432/Comficurry
      - SPRING_DATASOURCE_USERNAME=compose-postgres
      - SPRING_DATASOURCE_PASSWORD=PostGress@1
      - SPRING_JPA_HIBERNATE_DDL_AUTO=update
  
  
    
    networks: # Networks to join (Services on the same network can communicate with each other using their name)
      - backend
      - frontend

  # Frontend Service 
  app-client: 
    build:
      context: comficurryaaminapp # Use an image built from the specified dockerfile in the `react-app-client` directory.
      dockerfile: Dockerfile
    
      args:
        REACT_APP_API_BASE_URL: http://127.0.0.1:8080

    image: comficurry/dockercompose_app-client
    ports:
      - "9090:80" # Forward the exposed port 80 on the container to port 80 on the host machine
    restart: always
    depends_on:
      - app-server
    networks:
      - frontend  

  # Database Service (Postgress)
  db:
    image: postgres:13.2-alpine
    ports:
      - "5432:5432"
   # container_name: db
    environment:
      - POSTGRES_USER=compose-postgres
      - POSTGRES_PASSWORD=PostGress@1
      - POSTGRES_DB=Comficurry
    volumes:
      - db-data:/var/lib/postgresql/
    networks:
      - backend  
  
# Volumes
volumes:
  db-data:

# Networks to be created to facilitate communication between containers
networks:
  backend:
  frontend:    